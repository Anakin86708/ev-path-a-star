graph = [
    ('S', 'B', 4),
    ('B', 'S', 4),

    ('S', 'D', 5),
    ('D', 'S', 5),

    ('D', 'E', 2),
    ('E', 'D', 2),

    ('B', 'E', 1),
    ('E', 'B', 1),

    ('D', 'H', 3),
    ('H', 'D', 3),

    ('H', 'J', 1),
    ('J', 'H', 1),

    ('J', 'K', 6),
    ('K', 'J', 6),

    ('K', 'T', 2),
    ('T', 'K', 2),

    ('T', 'L', 3),
    ('L', 'T', 3),

    ('I', 'L', 4),
    ('L', 'I', 4),

    ('G', 'I', 3),
    ('I', 'G', 3),

    ('E', 'F', 6),
    ('F', 'E', 6),

    ('F', 'G', 4),
    ('G', 'F', 4),

    ('G', 'C', 1),
    ('C', 'G', 1)
]

expected = [
    'S',
    'D',
    'H',
    'J',
    'K',
    'T'
]

start_node = 'S'
end_node = 'T'

_heuristic = {
    'S': 5,
    'B': 4,
    'D': 4,
    'E': 3,
    'F': 2,
    'G': 3,
    'C': 4,
    'H': 3,
    'J': 2,
    'K': 1,
    'T': 0,
    'L': 1,
    'I': 2
}

def heuristic(node_name) -> float:
    return _heuristic[node_name]

